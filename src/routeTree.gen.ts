/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as PagesImport } from './routes/_pages'
import { Route as IndexImport } from './routes/index'
import { Route as PagesSendImport } from './routes/_pages/send'
import { Route as PagesReceiveImport } from './routes/_pages/receive'

// Create/Update Routes

const PagesRoute = PagesImport.update({
  id: '/_pages',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const PagesSendRoute = PagesSendImport.update({
  id: '/send',
  path: '/send',
  getParentRoute: () => PagesRoute,
} as any)

const PagesReceiveRoute = PagesReceiveImport.update({
  id: '/receive',
  path: '/receive',
  getParentRoute: () => PagesRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_pages': {
      id: '/_pages'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PagesImport
      parentRoute: typeof rootRoute
    }
    '/_pages/receive': {
      id: '/_pages/receive'
      path: '/receive'
      fullPath: '/receive'
      preLoaderRoute: typeof PagesReceiveImport
      parentRoute: typeof PagesImport
    }
    '/_pages/send': {
      id: '/_pages/send'
      path: '/send'
      fullPath: '/send'
      preLoaderRoute: typeof PagesSendImport
      parentRoute: typeof PagesImport
    }
  }
}

// Create and export the route tree

interface PagesRouteChildren {
  PagesReceiveRoute: typeof PagesReceiveRoute
  PagesSendRoute: typeof PagesSendRoute
}

const PagesRouteChildren: PagesRouteChildren = {
  PagesReceiveRoute: PagesReceiveRoute,
  PagesSendRoute: PagesSendRoute,
}

const PagesRouteWithChildren = PagesRoute._addFileChildren(PagesRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof PagesRouteWithChildren
  '/receive': typeof PagesReceiveRoute
  '/send': typeof PagesSendRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof PagesRouteWithChildren
  '/receive': typeof PagesReceiveRoute
  '/send': typeof PagesSendRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_pages': typeof PagesRouteWithChildren
  '/_pages/receive': typeof PagesReceiveRoute
  '/_pages/send': typeof PagesSendRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '' | '/receive' | '/send'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/receive' | '/send'
  id: '__root__' | '/' | '/_pages' | '/_pages/receive' | '/_pages/send'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PagesRoute: typeof PagesRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PagesRoute: PagesRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_pages"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_pages": {
      "filePath": "_pages.tsx",
      "children": [
        "/_pages/receive",
        "/_pages/send"
      ]
    },
    "/_pages/receive": {
      "filePath": "_pages/receive.tsx",
      "parent": "/_pages"
    },
    "/_pages/send": {
      "filePath": "_pages/send.tsx",
      "parent": "/_pages"
    }
  }
}
ROUTE_MANIFEST_END */
